{"version":3,"sources":["features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/taskLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/Form/useForm.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/Search/searchQueryParamName.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/SampleTasksButton/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/styled.js","features/tasks/TaskPage/index.js","features/autor/styled.js","features/autor/WBTaiko.png","features/autor/AuthorPage.js","styled.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["FormElement","styled","form","FormButton","button","theme","color","teal","white","breakpoint","mobileMax","Input","input","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","getItem","parse","hideDone","status","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","tasksId","index","findIndex","id","done","removeTask","taskId","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","actions","selectTasksState","setTasks","selectTasks","selectHideDone","selectAreTasksNotEmpty","length","selectIsEveryTaskDone","every","selectIsAnyTaskDone","some","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","focusInput","current","focus","useForm","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","autoFocus","ref","value","placeholder","onChange","target","onClick","List","ul","Item","li","hidden","css","Content","span","StyledLink","a","Button","toggleDone","green","remove","red","TaskList","location","useLocation","query","URLSearchParams","search","get","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","as","Link","to","ButtonsDiv","div","ButtonAdditional","grey","Buttons","areTasksNotEmpty","isEveryTaskDone","isAnyTaskDone","disabled","SampleTasksButton","PageSection","section","PageSectionDiv","PageSectionH2","h2","Section","title","body","extraContent","PageHeader","header","Header","Container","children","Wrapper","parameter","useQueryParameter","replaceQueryParameter","history","useHistory","key","searchParams","set","delete","pathname","toString","useReplaceQueryParameter","undefined","TasksPage","Search","TaskPage","useParams","find","getTaskById","mobile","Image","img","StyledParagraph","p","src","WBTaiko","alt","activeClassName","StyledNavLink","NavLink","attrs","StyledNav","nav","StyledList","StyledItem","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getExampleTasks","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","throttle","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.8d1363e6.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const FormElement = styled.form`\n    padding: 20px;\n    background: white;\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n`;\n\nexport const FormButton = styled.button`\n    background: ${({ theme }) => theme.color.teal};\n    color: ${({ theme }) => theme.color.white};\n    padding: 11px;\n    margin: 0px 0px 0px 15px;\n    border: none;\n    cursor: pointer;\n    transition: 1s;\n\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\n        flex-basis: 100%;\n        margin: 7px 0px;\n    }\n\n    &:hover {\n    filter: brightness(110%);\n    transform: scale(1.1);\n    }   \n\n    &:active {\n        filter: brightness(120%);\n    }\n\n    \n`;","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n    flex-grow: 1;\n    padding: 10px;\n    border: 1px solid #80808040;\n    border-radius: 1px;\n    font-size: 16px;\n`;","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = tasks =>\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\nexport const getTasksFromLocalStorage = () => {\n    return localStorage.getItem(localStorageKey)\n        ? JSON.parse(localStorage.getItem(localStorageKey))\n        : [];\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./taskLocalStorage\";\n\nconst tasksSlice = createSlice({\n    name: 'tasks',\n    initialState: {\n        tasks: getTasksFromLocalStorage(),\n        hideDone: false,\n        status: \"success\"\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload: task }) => {\n            tasks.push(task);\n        },\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n        toggleTaskDone: ({ tasks }, { payload: tasksId }) => {\n            const index = tasks.findIndex(({ id }) => id === tasksId);\n            tasks[index].done = !tasks[index].done;\n        },\n        removeTask: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId);\n            tasks.splice(index, 1);\n        },\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n        fetchExampleTasks: (state) => {\n            state.status = \"loading\";\n        },\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\n            state.tasks = tasks;\n            state.status = \"success\";\n        },\n    },\n});\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    removeTask,\n    setAllDone,\n    fetchExampleTasks,\n    fetchExampleTasksSuccess,\n    setTasks\n} = tasksSlice.actions;\n\nexport const selectTasksState = state => state.tasks;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHideDone = state => selectTasksState(state).hideDone;\nexport const selectAreTasksNotEmpty = state => selectTasks(state).length > 0;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\nexport const selectIsAnyTaskDone = state => selectTasks(state).some(({ done }) => done);\n\nexport const getTaskById = (state, taskId) =>\n    selectTasks(state).find(({ id }) => id === taskId);\n\nexport const selectTasksByQuery = (state, query) => {\n    const tasks = selectTasks(state)\n\n    if (!query || query.trim() === \"\") {\n        return tasks;\n    }\n    return tasks.filter(({ content }) =>\n        content.toUpperCase().includes(query.trim().toUpperCase()))\n};\n\nexport default tasksSlice.reducer;","import { FormElement, FormButton } from \"./styled\";\nimport { Input } from \"../../Input\";\nimport { useForm } from \"./useForm\";\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { addTask } from \"../../tasksSlice\";\n\nconst Form = () => {\n  const {\n    newTaskContent,\n    setNewTaskContent,\n    inputRef,\n    focusInput,\n  } = useForm()\n\n  const dispatch = useDispatch();\n\n  const onFormSubmit = (event,) => {\n    event.preventDefault();\n    const trimmedNewTaskContent = newTaskContent.trim();\n\n    if (trimmedNewTaskContent) {\n\n      dispatch(addTask({\n        content: trimmedNewTaskContent,\n        done: false,\n        id: nanoid(),\n      }));\n\n      setNewTaskContent(\"\");\n    };\n  };\n\n  return (\n    <FormElement onSubmit={onFormSubmit}>\n      <Input\n        autoFocus\n        ref={inputRef}\n        value={newTaskContent}\n        placeholder=\"Co jest do zrobienia?\"\n        onChange={({ target }) => setNewTaskContent(target.value)}\n      />\n\n      <FormButton onClick={focusInput}>Dodaj zadanie</FormButton>\n    </FormElement>\n  );\n};\n\nexport default Form;","import { useState, useRef, } from \"react\";\n\nexport const useForm = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\")\n\n    const inputRef = useRef();\n    const focusInput = () => {\n        inputRef.current.focus()\n    };\n\n    return {\n        newTaskContent,\n        setNewTaskContent,\n        inputRef,\n        focusInput,\n    };\n};","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    padding: 20px 0px;\n    margin: 0px;\n    background: white;\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    margin: 0px 15px;\n    padding: 10px;\n    align-items: center;\n    border-bottom: 1px solid #80808040;\n    word-break: break-word;\n\n   ${({ hidden }) => hidden && css`\n        display: none;\n   `}\n`;\n\nexport const Content = styled.span`\n    padding: 0px 10px;\n    flex-grow: 1;\n    color: #565555;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `}\n`;\n\nexport const StyledLink = styled.a`\n    text-decoration: none;\n    color: ${({ theme }) => theme.color.teal};\n\n    &:hover{\n        filter: brightness(120%);\n    }\n`;\n\nexport const Button = styled.button`\n    background: green;\n    border: none;\n    width: 27px;\n    height: 27px;\n    padding: 5px;\n    color: white;\n    flex-shrink: 0;\n    cursor: pointer;\n    transition: 0.3s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background : ${({ theme }) => theme.color.green};\n\n        &:hover {\n            filter: brightness(110%);\n    }       \n\n        &:active {\n            filter: brightness(120%);\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n    background: ${({ theme }) => theme.color.red};\n   \n    &:hover {\n        filter: brightness(110%);\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n    `} \n`;","export default \"szukaj\";","import { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport searchQueryParamName from \"../Search/searchQueryParamName\";\n\nconst TaskList = () => {\n    const location = useLocation();\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\n\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\n    const hideDone = useSelector(selectHideDone);\n    const dispatch = useDispatch();\n    return (\n        <List>\n            {tasks.map(task => (\n                <Item\n                    key={task.id}\n                    hidden={task.done && hideDone}\n                >\n\n                    <Button\n                        toggleDone\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\n                    >\n                        {task.done ? \"✓\" : \"\"}\n                    </Button>\n\n                    <Content done={task.done}>\n                        <StyledLink as={Link} to={`/zadania/${task.id}`}>{task.content}</StyledLink>\n                    </Content>\n\n                    <Button\n                        remove\n                        onClick={() => dispatch(removeTask(task.id))}\n                    >\n                        &#128465;\n                    </Button>\n                </Item>\n            ))}\n        </List>\n    );\n};\n\nexport default TaskList;","import styled from \"styled-components\";\n\nexport const ButtonsDiv = styled.div`\n    display: flex;\n    align-items: center;\n\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\n        flex-direction: column;\n        flex-basis: 100%;\n    }\n`;\n\nexport const ButtonAdditional = styled.button`\n    border: none;\n    background: ${({ theme }) => theme.color.white};\n    color: ${({ theme }) => theme.color.teal};\n    grid-gap: 20px;\n    transition: 1s;\n    margin: 10px 0px;\n    cursor: pointer;\n\n    &:hover {\n    filter: brightness(110%);\n    }\n\n    &:active {\n        filter: brightness(120%);\n    }\n\n    &:disabled {\n        color: ${({ theme }) => theme.color.grey};\n    cursor: unset;\n    }\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport {\n    selectIsAnyTaskDone,\n    selectHideDone,\n    selectIsEveryTaskDone,\n    selectAreTasksNotEmpty,\n    toggleHideDone,\n    setAllDone,\n} from \"../../tasksSlice\";\nimport { ButtonsDiv, ButtonAdditional } from \"../styled\";\n\nconst Buttons = () => {\n    const areTasksNotEmpty = useSelector(selectAreTasksNotEmpty);\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\n    const hideDone = useSelector(selectHideDone);\n    const isAnyTaskDone = useSelector(selectIsAnyTaskDone);\n    const dispatch = useDispatch();\n\n    return (\n        <ButtonsDiv>\n            {areTasksNotEmpty && (\n                <>\n                    <ButtonAdditional onClick={() => dispatch(toggleHideDone())}\n                        disabled={!isEveryTaskDone}\n                    >\n                        {isAnyTaskDone ? `${hideDone ? \"Pokaż\" : \"Ukryj\"}` : \"Ukryj\"} ukończone\n                    </ButtonAdditional>\n\n                    <ButtonAdditional\n                        onClick={() => dispatch(setAllDone())}\n                        disabled={isEveryTaskDone}\n                    >\n                        Ukończ wszystkie\n                    </ButtonAdditional>\n                </>\n            )}\n        </ButtonsDiv>\n    );\n};\n\nexport default Buttons;","import { ButtonAdditional, ButtonsDiv } from \"../styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchExampleTasks, selectTasksState } from \"../../tasksSlice\";\n\nconst SampleTasksButton = () => {\n    const dispatch = useDispatch();\n    const tasks = useSelector(selectTasksState);\n    return (\n        <ButtonsDiv>\n            <ButtonAdditional\n                disabled={tasks.status === \"loading\"}\n                onClick={() => dispatch(fetchExampleTasks())}>\n                {tasks.status === \"loading\"\n                    ? \"ładuję...\"\n                    : \"Pobierz przykładowe zadania\"\n                }\n            </ButtonAdditional>\n\n        </ButtonsDiv>\n    );\n};\n\nexport default SampleTasksButton;","import styled from \"styled-components\";\n\nexport const PageSection = styled.section`\n     margin: 0 5px 5px;\n`;\n\nexport const PageSectionDiv = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    background: ${({ theme }) => theme.color.white};\n    margin: 0px 0px 1px 0px;\n    padding-right: 15px;\n`;\n\nexport const PageSectionH2 = styled.h2`\n    margin: 0 0 1px;\n    padding: 15px;\n    background: ${({ theme }) => theme.color.white};\n    font-size: 17px;\n`;","import { PageSection, PageSectionDiv, PageSectionH2 } from \"./styled\";\n\nconst Section = ({ title, body, extraContent }) => (\n    <PageSection>\n        <PageSectionDiv>\n            <PageSectionH2>{title}</PageSectionH2>\n            {extraContent}\n        </PageSectionDiv>\n        {body}\n    </PageSection>\n);\n\nexport default Section;","import styled from \"styled-components\";\n\nexport const PageHeader = styled.header`\n    margin: 0px 5px;\n`;","import { PageHeader } from \"./styled\";\n\nconst Header = ({ title }) => (\n    <PageHeader>\n        <h1>{title}</h1>\n    </PageHeader>\n);\n\nexport default Header;","import React from \"react\";\n\nconst Container = ({ children }) => (\n    <main>\n        {children}\n    </main>\n);\n\nexport default Container;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    padding: 20px;\n    background: ${({ theme }) => theme.color.white};\n`;","import { Input } from \"../../Input\";\nimport { Wrapper } from \"./styled\";\nimport searchQueryParamName from \"./searchQueryParamName\";\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\n\nexport default () => {\n    const query = useQueryParameter(searchQueryParamName);\n    const replaceQueryParameter = useReplaceQueryParameter();\n\n    const onInputChange = ({ target }) => {\n        replaceQueryParameter({\n            key: searchQueryParamName,\n            value: target.value.trim() !== \"\" ? target.value : undefined,\n        });\n    };\n\n    return (\n        <Wrapper>\n            <Input\n                placeholder=\"Filtruj zadania\"\n                value={query || \"\"}\n                onChange={onInputChange}\n            />\n        </Wrapper>\n    );\n};","import { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useQueryParameter = (parameter) => {\n    const location = useLocation();\n    return (\n        (new URLSearchParams(location.search)).get(parameter)\n    );\n};\n\nexport const useReplaceQueryParameter = () => {\n    const location = useLocation();\n    const history = useHistory();\n\n    return ({ key, value }) => {\n        const searchParams = new URLSearchParams(location.search);\n\n        if (!value) {\n            searchParams.delete(key);\n        } else {\n            searchParams.set(key, value);\n        }\n\n        history.push(`${location.pathname}?${searchParams.toString()}`)\n    };\n};","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport SampletasksButton from \"./SampleTasksButton\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Header\n        title=\"Lista zadań\"\n      />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraContent={<SampletasksButton />}\n      />\n\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraContent={<Buttons />}\n      />\n    </Container>\n  );\n};\n\nexport default TasksPage;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    padding: 20px;\n    background: ${({ theme }) => theme.color.white};\n`;","import Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getTaskById } from \"../tasksSlice\";\nimport { Wrapper } from \"./styled\"\n\nfunction TaskPage() {\n    const { id } = useParams();\n    const task = useSelector(state => getTaskById(state, id));\n    \n    return (\n        <Container>\n            <Header\n                title=\"Szczegóły zadania\"\n            />\n\n            <Section\n                title={task ? task.content : \"Nie znaleziono zadania😟\"}\n                body={\n                    <>\n                        <Wrapper>\n                            <strong>Ukończono:</strong> {task ? task.done ? \"tak\" : \"nie\" : \"\"}\n                        </Wrapper>\n                    </>\n                }\n            />\n\n        </Container>\n    );\n};\n\nexport default TaskPage;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    padding: 20px;\n    background: ${({ theme }) => theme.color.white};\n    text-align: justify;\n    display:flex;\n    align-items: center;\n\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\n        text-align: left;\n    }\n\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n        flex-direction: column;\n        text-align: left;\n    }\n`;\n\nexport const Image = styled.img`\n    height: 202px;\n    width: 250px;\n    border-radius: 50px;\n    margin: 0 10px;\n`;\n\nexport const StyledParagraph = styled.p`\n    align-self: flex-start;\n`;","export default __webpack_public_path__ + \"static/media/WBTaiko.38ae8e0f.png\";","import Container from \"../../common/Container\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport { Image, StyledParagraph, Wrapper } from \"./styled\";\nimport WBTaiko from \"./WBTaiko.png\";\n\nexport default () => (\n    <Container>\n        <Header title=\"O autorze\" />\n        <Section\n            title=\"Wojciech Bylica\"\n            body={\n                <>\n                    <Wrapper>\n                        <Image src={WBTaiko} alt=\"Wojciech Bylica photo\" />\n                        <StyledParagraph>Perkusista, kompozytor, twórca o szerokich zainteresowaniach\n                            stylistycznych. Absolwent UMFC w Warszawie i PSJ im.\n                            H. Majewskiego w Warszawie. Stypendysta Urbanator Days, laureat konkursu Roland V-Drums.\n                        </StyledParagraph>\n                    </Wrapper>\n                </>\n            }\n        />\n    </Container>\n);","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\nconst activeClassName = \"active\";\n\n\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\n    activeClassName,\n}))`\n    color: ${({ theme }) => theme.color.white};\n    text-decoration: none;\n    &.${activeClassName} {\n        font-weight: bold;\n    }\n`;\n\nexport const StyledNav = styled.nav`\n    background: ${({ theme }) => theme.color.teal};\n    \n`;\n\nexport const StyledList = styled.ul`\n    display: flex;\n    justify-content: center;\n    margin: 0;\n    padding: 15px;\n    list-style-type: none;\n`;\n\nexport const StyledItem = styled.li`\n    margin: 0 10px;\n`;","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport TasksPage from \"./features/tasks/TasksPage/index\";\nimport TaskPage from \"./features/tasks/TaskPage/index\";\nimport AuthorPage from \"./features/autor/AuthorPage\";\nimport { StyledItem, StyledList, StyledNav, StyledNavLink } from \"./styled\";\n\nexport default () => (\n    <HashRouter>\n        <StyledNav>\n            <StyledList>\n                <StyledItem>\n                    <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\n                </StyledItem>\n                <StyledItem>\n                    <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\n                </StyledItem>\n            </StyledList>\n        </StyledNav>\n        <Switch>\n            <Route path=\"/zadania/:id\">\n                <TaskPage />\n            </Route>\n            <Route path=\"/zadania\">\n                <TasksPage />\n            </Route>\n            <Route path=\"/autor\">\n                <AuthorPage />\n            </Route>\n            <Route path=\"/\">\n                <Redirect to=\"/zadania\" />\n            </Route>\n        </Switch>\n\n    </HashRouter>\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, ::after, ::before {\n  box-sizing: inherit;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    font-family: \"Montserrat\", sans-serif;\n    margin: 0 auto;\n    max-width: 900px;\n    background: rgba(219, 216, 216, 0.733);\n    font-size: 15px;\n}\n`;","export const getExampleTasks = async () => {\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\n\n    if (!response.ok) {\n        new Error(response.statusText);\n    }\n\n    return await response.json();\n};","import { throttle, call, put, delay, takeEvery, select } from \"redux-saga/effects\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./taskLocalStorage\";\nimport { fetchExampleTasks, selectTasks, fetchExampleTasksSuccess } from \"./tasksSlice\";\n\nfunction* fetchExampleTasksHandler() {\n    try {\n        yield delay(1000);\n        const exampleTasks = yield call(getExampleTasks);\n        yield put(fetchExampleTasksSuccess(exampleTasks));\n    } catch (error) {\n        yield call(alert, \"Coś poszło nie tak!\");\n    };\n};\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks)\n}\n\nexport function* tasksSaga() {\n    yield throttle(2_000, fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n}","import { all } from \"@redux-saga/core/effects\";\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\n\n\nexport default function* rootSaga() {\n    yield all([\n        tasksSaga(),\n    ])\n}","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    },\n    middleware: [sagaMiddleware]\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from 'styled-normalize';\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    color: {\n        green: \"#00800\",\n        red: \"#ff0000\",\n        teal: \"teal\",\n        white: \"white\",\n        grey: \"grey\",\n    },\n    breakpoint: {\n        mobile: 500,\n        mobileMax:767,\n    },\n};"],"sourceRoot":""}